---
- name: "Build hosts file"
  template:
    src: hosts.j2
    dest: "/etc/hosts"

- name: Set Hostname with hostname command
  hostname:
    name: "{{ short_hostname }}"
  when: short_hostname is defined

- name: "ensure a home for {{ app_name }}"
  file:
    path: "{{ app_home }}"
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    state: directory
    recurse: yes
  register: app_home_created

# rabbitmq must be installed after the hostname is set
- include: rabbitmq.yml

- name: install system packages
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items: "{{ system_packages }}"
  tags:
    - packages

- name: Create a virtualenv with latest pip.
  pip:
    name: pip
    virtualenv: "{{ app_home }}"
    extra_args: '--upgrade'

- name: "pip+git install {{ app_name }} into virtualenv."
  pip:
    name: 'git+https://github.com/ceph/mita@{{ branch }}#egg=mita'
    virtualenv: "{{ app_home }}"
    editable: yes
    state: latest
  changed_when: False

- name: create the prod config file
  template:
    src: prod.py.j2
    dest: "{{ app_home }}/src/{{ app_name }}/prod.py"

- name: create the prod jenkins config file
  template:
    src: prod_jenkins.py.j2
    dest: "{{ app_home }}/src/{{ app_name }}/prod_jenkins.py"
  when: (jenkins_user is defined or jenkins_token is defined) or
        (app_home_created is defined and app_home_created is changed)

- name: create the prod provider config file
  template:
    src: prod_provider.py.j2
    dest: "{{ app_home }}/src/{{ app_name }}/prod_provider.py"
  when: (provider_user is defined and provider_password is defined) or
        (app_home_created is defined and app_home_created is changed)

- name: create the prod nodes config file
  template:
    src: prod_nodes.py.j2
    dest: "{{ app_home }}/src/{{ app_name }}/prod_nodes.py"
  when: (jenkins_prado_token is defined and prado_token is defined) or
        (app_home_created is defined and app_home_created is changed)

- name: install python requirements in virtualenv
  pip:
    requirements: "{{ app_home }}/src/{{ app_name }}/requirements.txt"
    state: present
    virtualenv: "{{ app_home }}"
  notify: restart app

- include: postgresql.yml
  tags:
    - postgres

- include: systemd.yml
  tags:
    - systemd

- name: "ensure {{ app_home }} is owned by {{ ansible_ssh_user }}"
  file:
    path: "{{ app_home }}"
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    state: directory
    recurse: yes
